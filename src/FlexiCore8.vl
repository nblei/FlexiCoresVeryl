module FlexiCore8 (
    clk   : input  logic<1>                    ,
    rst   : input  logic<1>                    ,
    instr : input  logic<FlexiCore8_pkg::IW>   ,
    data_i: input  logic<FlexiCore8_pkg::DW>   ,
    addr  : output logic<FlexiCore8_pkg::PCLen>,
    data_o: output logic<FlexiCore8_pkg::DW>   ,
) {
    var pc : logic<FlexiCore8_pkg::PCLen>                         ;
    var acc: logic<FlexiCore8_pkg::DW>                            ;
    var rf : logic<FlexiCore8_pkg::DW>    [FlexiCore8_pkg::RFSize];

    var rf_addr: logic<FlexiCore8_pkg::AddrSize>;
    assign rf_addr = FlexiCore8_pkg::get_src_addr(instr);

    var rf_data: logic<FlexiCore8_pkg::DW> = if rf_addr != 0 {
        rf[rf_addr]
    } else {
        data_i
    };
    var immdata: logic<FlexiCore8_pkg::DW> = FlexiCore8_pkg::get_imm(instr);
    var srcdata: logic<FlexiCore8_pkg::DW> = if FlexiCore8_pkg::is_itype(instr) {
        immdata
    } else {
        rf_data
    };

    var cbit: logic<1>;

    var is_br: logic<1>;
    assign is_br = FlexiCore8_pkg::is_branch(instr);

    var take_br: logic<1>;
    assign take_br = is_br & acc[7];

    // Branch Logic
    always_ff (clk, rst) {
        if_reset {
            pc = '0;
        } else if take_br {
            pc = FlexiCore8_pkg::br_tgt(instr);
        } else {
            pc = pc + 1;
        }
    }

    // ALU
    var adc  : logic<FlexiCore8_pkg::DW + 1>;
    assign adc   = {1'b0, acc} + {1'b0, srcdata} + {8'h00, cbit};
    var _add : logic<FlexiCore8_pkg::DW + 1>;
    assign _add  = {1'b0, acc} + {1'b0, srcdata};
    var _nand: logic<FlexiCore8_pkg::DW> = ~(acc & srcdata);
    var _xor : logic<FlexiCore8_pkg::DW> = ~(acc ^ srcdata);

    var was_load: logic<1>;

    // was_load logic
    always_ff (clk, rst) {
        if_reset {
            was_load = 0;
        } else {
            was_load = FlexiCore8_pkg::is_load(instr) & (~was_load);
        }
    }

    // rf logic
    always_ff (clk) {
        if FlexiCore8_pkg::is_rf_store(instr) && rf_addr != 0 {
            rf[rf_addr] = acc;
        }
    }

    // Acc logic
    always_ff (clk, rst) {
        if_reset {
            acc = 0;
        } else if was_load {
            acc = instr;
        } else if FlexiCore8_pkg::is_acc_store(instr) {
            acc = rf_data;
        } else if FlexiCore8_pkg::is_alu(instr) {
            case (instr[1:0]) {
                2'b00: acc = _add[7:0];
                2'b01: acc = _xor;
                2'b10: acc = _nand;
                default: acc = _nand;
            }
        }
    }
    assign addr   = pc;
    assign data_o = rf[1];
}
